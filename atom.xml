<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JamesXBY的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-16T17:45:39.782Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JamesXBY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寻找最大值</title>
    <link href="http://yoursite.com/2018/10/17/%E5%85%A5%E9%97%A8/%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://yoursite.com/2018/10/17/入门/寻找最大值/</id>
    <published>2018-10-16T16:50:07.670Z</published>
    <updated>2018-10-16T17:45:39.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入n个整数，询问这些数中的最大值是多少？</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>第1行：一个整数n，表示输入整数的个数<br>第2行：n个整数</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>一个整数，表示之前整数中的最大值</p><h1 id="样例输入输出"><a href="#样例输入输出" class="headerlink" title="样例输入输出"></a>样例输入输出</h1><p>样例输入#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 5 6 4 1</span><br></pre></td></tr></table></figure></p><p>样例输出#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>我们要做的就是求出输入数据中的最大值<br>我们可以这样做：<strong>每读入一个数，将这个数和我们读入这个数之前的最大值比较，如果这个数比之前的最大值要大，那么更新最大值，否则跳过这个数。</strong>当我们所有数都进行完上述判断之后，我们便得到了这组数据的最大值<br>思路很简单，但这里有一个问题：我们每次将读入的数和之前的最大值比较，那我们读第一个数的时候和什么比较呢？换句话说，<strong>我们的最大值应该怎么初始化呢？</strong><br>这是一个令人头疼的问题，这里给出两种解决方式</p><h2 id="将最大值赋值为第一个数据"><a href="#将最大值赋值为第一个数据" class="headerlink" title="将最大值赋值为第一个数据"></a>将最大值赋值为第一个数据</h2><p>我们将最大值赋值为第一个数据，相当于让第一个数据直接参与了和最大值的比较<br>如果后面有数据大于它，那么他会被更新<br>如果没有，那么它就是最大值<br>我们发现，这样的操作是可以达到我们的要求的<br>具体见代码1</p><h2 id="假想极小值"><a href="#假想极小值" class="headerlink" title="假想极小值"></a>假想极小值</h2><p>我们可以将最大值初始化为一个极小值，我们后面的数据肯定要比这个极小值要大，因此，它会被后面的数据（往往是第一个数据）更新<br>在用这种方法时，我们一定要根据题目给出的数据范围理性分析，避免出现数据溢出/极小值不够小的问题<br>具体见代码2</p><p>实现的过程（以样例为例）：<br>先令maxn = -100000（感觉够小了）<br>下面开始读入数据：<br>1：3 &gt; -100000，maxn变为3（这样就更新了最大值）<br>2：5 &gt; 3，maxn变为5<br>3：6 &gt; 5，maxn变为6<br>4：4 &lt; 6，maxn不变，为6<br>5：1 &lt; 6，maxn不变，为6<br>这样，我们就得到了这些数据中的最大值6</p><h1 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h1><h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我们不一定要用数组把所有数都存下来，可以边读边操作</span></span><br><span class="line">    <span class="comment">//对一个变量x循环进行读入就可以了</span></span><br><span class="line">    <span class="comment">//当然，如果我们要对数据进行更多更复杂的操作，那就应该读到数组里</span></span><br><span class="line">    <span class="keyword">int</span> n, x, maxn;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; maxn;                        <span class="comment">//将最大值初始化为第一个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;   <span class="comment">//第一个数已经被读入了，只需要n-1次操作即可</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; maxn)                    <span class="comment">//如果这个数比前面的最大值更大，则更新最大值为这个数</span></span><br><span class="line">            maxn = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxn;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, maxn = <span class="number">-100000</span>;           <span class="comment">//将最大值初始化为极小值</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; maxn)                    <span class="comment">//如果这个数比前面的最大值更大，则更新最大值为这个数</span></span><br><span class="line">            maxn = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxn;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>记录最大值的方法，虽然算不上什么算法，但确实十分重要，是很多算法的基础。在很长时间的学习后，当你开始学习更高级的最大值维护方法的时候，你就离成功不远了~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入n个整数，询问这些数中的最大值是多少？&lt;/p&gt;
&lt;h1 id=&quot;输入输出格式&quot;&gt;&lt;a href=&quot;#输入输出格式&quot; cl
      
    
    </summary>
    
      <category term="入门" scheme="http://yoursite.com/categories/%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="循环" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>皮皮的数学题（1）</title>
    <link href="http://yoursite.com/2018/10/09/%E5%85%A5%E9%97%A8/%E7%9A%AE%E7%9A%AE%E7%9A%84%E6%95%B0%E5%AD%A6%E9%A2%98%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/09/入门/皮皮的数学题（1）/</id>
    <published>2018-10-09T14:59:21.721Z</published>
    <updated>2018-10-09T16:03:12.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>计算出1~n之间所有整数中，能被a或b整除的所有数的和</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入仅一行，三个整数n，a，b</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>输出一个整数，表示所有满足条件的整数之和</p><p>样例输入#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 2 3</span><br></pre></td></tr></table></figure></p><p>样例输出#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">137</span><br></pre></td></tr></table></figure></p><p>样例输入#2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">160 23 25</span><br></pre></td></tr></table></figure></p><p>样例输出#2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1008</span><br></pre></td></tr></table></figure></p><h1 id="样例输入输出说明"><a href="#样例输入输出说明" class="headerlink" title="样例输入输出说明"></a>样例输入输出说明</h1><p>样例1：<br>满足条件的数：2 + 3 + 4 + 6 + 8 + 9 + 10 + 12 + 14 + 15 + 16 + 18 + 20 = 137</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>根据题意模拟即可</p><h1 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;           <span class="comment">//让i从1循环到n    </span></span><br><span class="line">        <span class="keyword">if</span>(i % a == <span class="number">0</span> || i % b == <span class="number">0</span>)        <span class="comment">//如果能被a或b整除</span></span><br><span class="line">            sum += i;                       <span class="comment">//累加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;计算出1~n之间所有整数中，能被a或b整除的所有数的和&lt;/p&gt;
&lt;h1 id=&quot;输入输出格式&quot;&gt;&lt;a href=&quot;#输入输出
      
    
    </summary>
    
      <category term="入门" scheme="http://yoursite.com/categories/%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="循环" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>李老师家的水费</title>
    <link href="http://yoursite.com/2018/10/09/%E5%85%A5%E9%97%A8/%E6%9D%8E%E8%80%81%E5%B8%88%E5%AE%B6%E7%9A%84%E6%B0%B4%E8%B4%B9/"/>
    <id>http://yoursite.com/2018/10/09/入门/李老师家的水费/</id>
    <published>2018-10-09T14:32:58.757Z</published>
    <updated>2018-10-09T16:05:36.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>李老师家里要交水费了</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>李老师这两个月用了x（x &lt;= 200）方水，他所在的小区实行分段收费制度，在30方及以下的部分只收取5元/方的基础费用，30到80（包括80）方的部分要额外收取基础费用10%的水税（暂且认为有这种税），超过80的部分要额外收取基础费用30%的水税。李老师的计算器坏了，手机也没电了，他想让你设计一个程序，帮他算一算他应该交多少水费</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>一行一个整数x，表示李老师的用水量</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>一个小数（保留2位小数），表示李老师需要交的水费  </p><h1 id="样例输入输出"><a href="#样例输入输出" class="headerlink" title="样例输入输出"></a>样例输入输出</h1><p>样例输入#1： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><p>样例输出#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">75.00</span><br></pre></td></tr></table></figure></p><p>样例输入#2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">85</span><br></pre></td></tr></table></figure></p><p>样例输出#2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">457.50</span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>实质就是一个分段函数<br>最简单的思路就是把基础部分和额外部分(那个叫水税的东西）分开考虑<br>基础部分都是5 * x<br>再分情况讨论每个区间下的水税收取情况，两部分相加即可</p><h1 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于需要输出确定长度的，或输出n位小数的，我们一般用printf。这</span></span><br><span class="line"><span class="comment">也就是为什么让大家不要忘记printf和scanf的原因：在某些情况下，</span></span><br><span class="line"><span class="comment">他们要比cin和cout更为方便</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;              <span class="comment">//这里就不用初始化，当然初始化0也是没有问题的 </span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">30</span>)         <span class="comment">//第一档 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, <span class="number">5</span> * x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &lt;= <span class="number">80</span>)    <span class="comment">//第二档 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, <span class="number">5</span> * x + <span class="number">5</span> * <span class="number">0.1</span> * (x - <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">else</span>                <span class="comment">//都不是肯定是第三档 </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, <span class="number">5</span> * x + <span class="number">5</span> * <span class="number">0.1</span> * <span class="number">50</span> + <span class="number">5</span> * <span class="number">0.3</span> * (x - <span class="number">80</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目背景&quot;&gt;&lt;a href=&quot;#题目背景&quot; class=&quot;headerlink&quot; title=&quot;题目背景&quot;&gt;&lt;/a&gt;题目背景&lt;/h1&gt;&lt;p&gt;李老师家里要交水费了&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="入门" scheme="http://yoursite.com/categories/%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="条件" scheme="http://yoursite.com/tags/%E6%9D%A1%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构：并查集（1）：基本概念与实现</title>
    <link href="http://yoursite.com/2018/10/07/NOIp/%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/07/NOIp/并查集（1）/</id>
    <published>2018-10-06T16:47:26.936Z</published>
    <updated>2018-10-09T15:48:17.872Z</updated>
    
    <content type="html"><![CDATA[<p>并查集是一种用来维护多个集合（或对象）之间集合关系的数据结构，在很多题目中可以直接应用。它也经常被用在图论的算法优化中，是一种简单实用，又十分重要的数据结构</p><h1 id="题目引入"><a href="#题目引入" class="headerlink" title="题目引入"></a>题目引入</h1><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p>有n（1 &lt;= n &lt;= 20）个元素，分别属于编号为1-n的集合。现有t（1 &lt;= t &lt;= 20）次询问，每次询问对应如下两种操作：<br>A：将两个元素所在的集合<strong>合并</strong><br>B：<strong>询问</strong>两个元素是否在同一集合中</p><p>解答：直接开数组模拟<br>对于操作A：遍历所有数组，寻找两个元素所在的集合，将一个集合中的元素全部移入另一个集合<br>对于操作B：依然遍历寻找集合，判断集合编号是否相同</p><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p>题目要求不变，数据范围改为：1 &lt;= n &lt;= 10000, 1 &lt;= t &lt;= 200000</p><p>解答：暴力模拟肯定超时，需要并查集</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>并查集是由若干树（又称森林）组成的。起始时所有结点无儿子，且父亲为它本身。  </p><p><div align="center"> <img src="https://i.imgur.com/fBI0lY7.jpg" alt=""><div align="left"><br>在合并操作后，如果两个节点属于同一棵树，那么他们属于同一个集合。换而言之，一棵树的所有节点构成一个集合<br>如图，将1合并到2后，1，2构成一棵树，则1，2属于同一个集合</div></div></p><p><div align="center"> <img src="https://i.imgur.com/nzBzyFa.jpg" alt=""><div align="left"></div></div></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h2><p>我们一般使用数组来维护并查集：<br>定义一个fa（father）数组，记录每个结点的父节点<br>根据定义，每个结点的父亲需初始化为它自己，即fa[i] = i<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化部分</span></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100005</span>], n;</span><br><span class="line"><span class="comment">//n：集合个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>从字面上就能够看出，并查集的基本操作就是“并”和“查”，也就是例题中的两种操作<br>我们先来研究怎么“查”  </p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>根据定义，我们不难得到这样的性质：</p><blockquote><p>在并查集中，每个结点有且仅有一个最高祖先（即树的根），这个祖先的父亲是他自己 </p></blockquote><p>有了这样的性质，我们不难发现，判断两个结点是否属于同一个集合，等价于判断他们的最高祖先是否相同<br>那么，我们的核心任务便成了如何找到每个结点的最高祖先<br>我们只需要根据fa数组，寻找它的父亲，再寻找父亲的父亲，再寻找父亲的父亲的父亲……<strong>直到找到一个结点，它的父亲是它自己</strong>，那么我们就找到了最高祖先。<br>对于查询操作，我们常用递归写法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找部分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == fa[x])          <span class="comment">//x == fa[x]当且仅当x为最高祖先</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> find(fa[x]);     <span class="comment">//递归找爸爸。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上所述，我们判断两个结点x, y是否属于同一个集合，只需判断find(x)和find(y)是否相等即可</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>那我们怎么将两个结点x, y所在的集合合并为一个集合呢？<br>我们只有一个fa数组，当然还是从它入手了<br>我们发现，除了根结点的fa可以用，其他的fa都不是空闲的：随意改变这些fa的值会让以它为根的子树从原集合脱离<br>所以我们还是要找到根，也就是最高祖先。之前的find()便派上用场了<br>如果我们现在找到了x的最高祖先t，那么我们只需要让fa[t] = y，以t为根的这棵树就成为了y这棵树的子树，那么根据定义，这两个集合便成为一个集合了<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并操作（有漏洞）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = find(x);</span><br><span class="line">    fa[t] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们的想法是正确的，但是遗漏了一点：如果x和y本来就在一个集合中怎么办？如果按我们刚才的想法操作，那么并查集就可能会变成一个有环图，再次find的时候就会死循环<br>所以，我们还要先判断x, y是否属于同一个集合，如果属于，则不进行任何操作<br>到了这里，我们再回想之前的合并操作：我们直接将t并到了y上。其实，我们可以<strong>将t并在y的最高祖先上</strong>，不难发现这样的操作和刚才所能达到的效果是相同的。但是，之前的操作会使下次find的时间增加：合并后，如果find某个原来在x这棵树上的结点，那么它一定要先到y，再从y找到y的最高祖先。而如果直接合并到y的最高祖先，那么就可以跳过y到它的最高祖先这一段路径，时间复杂度减少O(y的深度)<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);            <span class="comment">//将x, y分别赋值为他们各自的最高祖先</span></span><br><span class="line">    <span class="keyword">if</span>(x == y)              <span class="comment">//如果已经在一个集合，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    fa[x] = y;              <span class="comment">//将x的最高祖先并到y的最高祖先</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是并查集的基本操作，但是，如果数据喜（bian）人（tai），这样朴素的做法还是会超时。下一节将重点介绍并查集的优化策略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;并查集是一种用来维护多个集合（或对象）之间集合关系的数据结构，在很多题目中可以直接应用。它也经常被用在图论的算法优化中，是一种简单实用，又十分重要的数据结构&lt;/p&gt;
&lt;h1 id=&quot;题目引入&quot;&gt;&lt;a href=&quot;#题目引入&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="NOIp" scheme="http://yoursite.com/categories/NOIp/"/>
    
    
      <category term="NOIp" scheme="http://yoursite.com/tags/NOIp/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
